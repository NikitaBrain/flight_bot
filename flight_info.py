import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import AVIATIONSTACK_API_KEY, AVIATIONSTACK_FLIGHT_URL
from utils import format_date
import json
from datetime import datetime

logger = logging.getLogger(__name__)

def translate_status(status):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    status_translations = {
        'scheduled': '‚úîÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
        'active': 'üõ´ –í –ø–æ–ª–µ—Ç–µ',
        'landed': 'üõ¨ –ü—Ä–∏–∑–µ–º–ª–∏–ª—Å—è',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
        'incident': '‚ö†Ô∏è –ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ',
        'diverted': 'üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω',
        'unknown': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
    }
    return status_translations.get(status, f'‚ùì {status}')

def safe_get(data, key, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    if not data or not isinstance(data, dict):
        return default
    value = data.get(key, default)
    return value if value not in [None, 'null', 'None', ''] else default

def format_flight_date(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –¥–¥.–º–º.–≥–≥–≥–≥"""
    try:
        dt = datetime.strptime(date_str, "%Y-%m-%d")
        return dt.strftime("%d.%m.%Y")
    except:
        return date_str

async def show_flight_info_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    
    instruction_text = (
        "‚úàÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "SU1234\n"
        "–Ø –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ."
    )
    
    if update.callback_query:
        await message.edit_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await message.reply_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_flight_info_request(update: Update, flight_number: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"""
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        flight_number = flight_number.strip().upper()
        
        if not flight_number:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞")
            return
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ AviationStack
        params = {
            'access_key': AVIATIONSTACK_API_KEY,
            'flight_iata': flight_number,
            'limit': 1
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(AVIATIONSTACK_FLIGHT_URL, params=params, timeout=15)
        
        try:
            data = response.json()
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤–∏–∞–¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö
        flight_data_list = data.get('data', [])
        if not flight_data_list:
            await update.message.reply_text(
                f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        flight_data = flight_data_list[0]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        departure = flight_data.get('departure', {}) or {}
        arrival = flight_data.get('arrival', {}) or {}
        airline = flight_data.get('airline', {}) or {}
        flight_info = flight_data.get('flight', {}) or {}
        aircraft = flight_data.get('aircraft', {}) or {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–µ
        message = f"‚úàÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number}:\n\n"
        
        # –û—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞
        dep_airport = safe_get(departure, 'airport')
        dep_iata = safe_get(departure, 'iata')
        arr_airport = safe_get(arrival, 'airport')
        arr_iata = safe_get(arrival, 'iata')
        
        message += f"{dep_airport or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ({dep_iata or '?'}) - {arr_airport or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ({arr_iata or '?'})\n"
        
        # –î–∞—Ç–∞ —Ä–µ–π—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å
        flight_date = safe_get(flight_data, 'flight_date')
        if flight_date:
            message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–π—Å–∞: {format_flight_date(flight_date)}\n"
        
        status = safe_get(flight_data, 'flight_status', 'unknown')
        message += f"üìä –°—Ç–∞—Ç—É—Å: {translate_status(status)}\n\n"
        
        # üõ´ –í–´–õ–ï–¢
        message += "üõ´ –í–´–õ–ï–¢:\n"
        message += f"üìç –ê—ç—Ä–æ–ø–æ—Ä—Ç: {dep_airport or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ({dep_iata or '?'})\n"
        
        # –¢–æ–ª—å–∫–æ –Ω–µ-None –ø–æ–ª—è –¥–ª—è –≤—ã–ª–µ—Ç–∞
        dep_terminal = safe_get(departure, 'terminal')
        if dep_terminal:
            message += f"‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω–∞–ª: {dep_terminal}\n"
        
        dep_gate = safe_get(departure, 'gate')
        if dep_gate:
            message += f"üö™ –ì–µ–π—Ç: {dep_gate}\n"
        
        dep_scheduled = safe_get(departure, 'scheduled')
        if dep_scheduled:
            message += f"üïê –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {format_date(dep_scheduled)}\n"
        
        dep_estimated = safe_get(departure, 'estimated')
        if dep_estimated:
            message += f"üïê –û–∂–∏–¥–∞–µ—Ç—Å—è: {format_date(dep_estimated)}\n"
        
        dep_actual = safe_get(departure, 'actual')
        if dep_actual:
            message += f"üïê –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {format_date(dep_actual)}\n"
        
        dep_delay = safe_get(departure, 'delay')
        if dep_delay and int(dep_delay) > 0:
            message += f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {dep_delay} –º–∏–Ω\n"
        
        message += "\n"
        
        # üõ¨ –ü–†–ò–ë–´–¢–ò–ï
        message += "üõ¨ –ü–†–ò–ë–´–¢–ò–ï:\n"
        message += f"üìç –ê—ç—Ä–æ–ø–æ—Ä—Ç: {arr_airport or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ({arr_iata or '?'})\n"
        
        # –¢–æ–ª—å–∫–æ –Ω–µ-None –ø–æ–ª—è –¥–ª—è –ø—Ä–∏–±—ã—Ç–∏—è
        arr_terminal = safe_get(arrival, 'terminal')
        if arr_terminal:
            message += f"‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω–∞–ª: {arr_terminal}\n"
        
        arr_gate = safe_get(arrival, 'gate')
        if arr_gate:
            message += f"üö™ –ì–µ–π—Ç: {arr_gate}\n"
        
        arr_baggage = safe_get(arrival, 'baggage')
        if arr_baggage:
            message += f"üõÑ –ë–∞–≥–∞–∂: {arr_baggage}\n"
        
        arr_scheduled = safe_get(arrival, 'scheduled')
        if arr_scheduled:
            message += f"üïê –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {format_date(arr_scheduled)}\n"
        
        arr_estimated = safe_get(arrival, 'estimated')
        if arr_estimated:
            message += f"üïê –û–∂–∏–¥–∞–µ—Ç—Å—è: {format_date(arr_estimated)}\n"
        
        arr_actual = safe_get(arrival, 'actual')
        if arr_actual:
            message += f"üïê –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {format_date(arr_actual)}\n"
        
        arr_delay = safe_get(arrival, 'delay')
        if arr_delay and int(arr_delay or 0) > 0:
            message += f"‚Ä¢ ‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {arr_delay} –º–∏–Ω\n"
        
        message += "\n"
        
        # ‚úàÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ô–°–ï
        message += "‚úàÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ô–°–ï:\n"
        
        airline_name = safe_get(airline, 'name')
        airline_iata = safe_get(airline, 'iata')
        if airline_name and airline_iata:
            message += f"‚Ä¢ –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline_name} ({airline_iata})\n"
        elif airline_name:
            message += f"‚Ä¢ –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline_name}\n"
        
        flight_iata = safe_get(flight_info, 'iata')
        if flight_iata:
            message += f"‚Ä¢ –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞: {flight_iata}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ–ª–µ—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        aircraft_iata = safe_get(aircraft, 'iata')
        aircraft_name = safe_get(aircraft, 'name')
        if aircraft_iata and aircraft_name:
            message += f"‚Ä¢ –°–∞–º–æ–ª–µ—Ç: {aircraft_name} ({aircraft_iata})\n"
        elif aircraft_name:
            message += f"‚Ä¢ –°–∞–º–æ–ª–µ—Ç: {aircraft_name}\n"
        elif aircraft_iata:
            message += f"‚Ä¢ –°–∞–º–æ–ª–µ—Ç: {aircraft_iata}\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–π—Å", callback_data='flight_info')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )