import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import AVIATIONSTACK_API_KEY, AVIATIONSTACK_FLIGHT_URL
from utils import format_date
import json

logger = logging.getLogger(__name__)

def translate_status(status):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    status_translations = {
        'scheduled': 'üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
        'active': 'üõ´ –í –ø–æ–ª–µ—Ç–µ',
        'landed': 'üõ¨ –ü—Ä–∏–∑–µ–º–ª–∏–ª—Å—è',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
        'incident': '‚ö†Ô∏è –ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ',
        'diverted': 'üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω',
        'unknown': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
    }
    return status_translations.get(status, f'‚ùì {status}')

def safe_get(data, key, default='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    if not data or not isinstance(data, dict):
        return default
    return data.get(key, default)

async def show_flight_info_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    
    instruction_text = (
        "‚úàÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–∫–æ–¥ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏><–Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "SU1234\n"
        "S7151\n"
        "U6256\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ."
    )
    
    if update.callback_query:
        await message.edit_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await message.reply_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_flight_info_request(update: Update, flight_number: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"""
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        flight_number = flight_number.strip().upper()
        
        if not flight_number:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞")
            return
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ AviationStack
        params = {
            'access_key': AVIATIONSTACK_API_KEY,
            'flight_iata': flight_number,
            'limit': 1
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(AVIATIONSTACK_FLIGHT_URL, params=params, timeout=15)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"AviationStack response status: {response.status_code}")
        
        try:
            data = response.json()
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}, response text: {response.text}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤–∏–∞–¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not data or not isinstance(data, dict):
            logger.error(f"Invalid response format: {data}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤–∏–∞–¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
        if 'error' in data:
            error_info = data.get('error', {})
            error_message = error_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logger.error(f"AviationStack error: {error_message}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ API: {error_message}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö
        flight_data_list = data.get('data', [])
        if not flight_data_list or not isinstance(flight_data_list, list):
            await update.message.reply_text(
                f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        flight_data = flight_data_list[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–µ
        message = f"‚úàÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number}:\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        departure = flight_data.get('departure', {}) or {}
        arrival = flight_data.get('arrival', {}) or {}
        airline = flight_data.get('airline', {}) or {}
        flight_info = flight_data.get('flight', {}) or {}
        aircraft = flight_data.get('aircraft', {}) or {}
        live_data = flight_data.get('live', {}) or {}
        
        # üìÖ –î–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞
        message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–π—Å–∞: {flight_data.get('flight_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        status = flight_data.get('flight_status', 'unknown')
        message += f"üìä –°—Ç–∞—Ç—É—Å: {translate_status(status)}\n\n"
        
        # üõ´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ª–µ—Ç–µ
        message += "üõ´ –í–´–õ–ï–¢:\n"
        message += f"‚Ä¢ –ê—ç—Ä–æ–ø–æ—Ä—Ç: {safe_get(departure, 'airport')} ({safe_get(departure, 'iata')})\n"
        message += f"‚Ä¢ –¢–µ—Ä–º–∏–Ω–∞–ª: {safe_get(departure, 'terminal')}\n"
        message += f"‚Ä¢ –ì–µ–π—Ç: {safe_get(departure, 'gate')}\n"
        
        if departure.get('scheduled'):
            message += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {format_date(departure['scheduled'])}\n"
        if departure.get('estimated'):
            message += f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è: {format_date(departure['estimated'])}\n"
        if departure.get('actual'):
            message += f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {format_date(departure['actual'])}\n"
        
        delay = departure.get('delay')
        if delay and int(delay) > 0:
            message += f"‚Ä¢ ‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} –º–∏–Ω\n"
        
        message += "\n"
        
        # üõ¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏
        message += "üõ¨ –ü–†–ò–ë–´–¢–ò–ï:\n"
        message += f"‚Ä¢ –ê—ç—Ä–æ–ø–æ—Ä—Ç: {safe_get(arrival, 'airport')} ({safe_get(arrival, 'iata')})\n"
        message += f"‚Ä¢ –¢–µ—Ä–º–∏–Ω–∞–ª: {safe_get(arrival, 'terminal')}\n"
        message += f"‚Ä¢ –ì–µ–π—Ç: {safe_get(arrival, 'gate')}\n"
        message += f"‚Ä¢ –ë–∞–≥–∞–∂: {safe_get(arrival, 'baggage')}\n"
        
        if arrival.get('scheduled'):
            message += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {format_date(arrival['scheduled'])}\n"
        if arrival.get('estimated'):
            message += f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è: {format_date(arrival['estimated'])}\n"
        if arrival.get('actual'):
            message += f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {format_date(arrival['actual'])}\n"
        
        arrival_delay = arrival.get('delay')
        if arrival_delay and int(arrival_delay or 0) > 0:
            message += f"‚Ä¢ ‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {arrival_delay} –º–∏–Ω\n"
        
        message += "\n"
        
        # ‚úàÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
        message += "‚úàÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ô–°–ï:\n"
        message += f"‚Ä¢ –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {safe_get(airline, 'name')} ({safe_get(airline, 'iata')})\n"
        message += f"‚Ä¢ –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞: {safe_get(flight_info, 'number')}\n"
        message += f"‚Ä¢ –ö–æ–¥ IATA: {safe_get(flight_info, 'iata')}\n"
        message += f"‚Ä¢ –ö–æ–¥ ICAO: {safe_get(flight_info, 'icao')}\n"
        
        # üõ©Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ–ª–µ—Ç–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if aircraft:
            message += f"‚Ä¢ –¢–∏–ø –í–°: {safe_get(aircraft, 'iata')} ({safe_get(aircraft, 'registration')})\n"
        
        # üì° Live –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if live_data:
            message += "\nüì° –î–ê–ù–ù–´–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò:\n"
            if live_data.get('altitude'):
                message += f"‚Ä¢ –í—ã—Å–æ—Ç–∞: {live_data['altitude']} –º\n"
            if live_data.get('speed'):
                message += f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {live_data['speed']} –∫–º/—á\n"
            if live_data.get('direction'):
                message += f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {live_data['direction']}¬∞\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–π—Å", callback_data='flight_info')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except requests.exceptions.Timeout:
        await update.message.reply_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
    except IndexError:
        await update.message.reply_text(
            f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )