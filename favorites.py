from typing import Dict, Optional
from datetime import datetime
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from storage import favorite_storage
from config import AVIASALES_CHEAP_URL, AVIASALES_API_TOKEN
import requests
from utils import get_airline_name, format_date

logger = logging.getLogger(__name__)

class FavoritesManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    @staticmethod
    def create_route_key(origin: str, destination: str, 
                        depart_date: Optional[str] = None, 
                        return_date: Optional[str] = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞"""
        key_parts = [origin, destination]
        if depart_date:
            key_parts.append(depart_date)
        if return_date:
            key_parts.append(return_date)
        return "-".join(key_parts)
    
    @staticmethod
    async def add_to_favorites(update: Update, user_id: int, search_params: Dict) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–π—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        route_key = FavoritesManager.create_route_key(
            origin=search_params['origin'],
            destination=search_params['destination'],
            depart_date=search_params.get('depart_date'),
            return_date=search_params.get('return_date')
        )
        
        route_data = {
            'route_key': route_key,
            'origin': search_params['origin'],
            'destination': search_params['destination'],
            'depart_date': search_params.get('depart_date'),
            'return_date': search_params.get('return_date'),
            'added_at': datetime.now().isoformat()
        }
        
        if favorite_storage.add_favorite(user_id, route_data):
            message = update.message or update.callback_query.message
            await message.reply_text(
                "‚úÖ –†–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data='my_favorites')],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
        else:
            message = update.message or update.callback_query.message
            await message.reply_text("‚ùå –≠—Ç–æ—Ç —Ä–µ–π—Å —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
    
    @staticmethod
    async def show_favorites_menu(update: Update, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤"""
        message = update.message or update.callback_query.message
        
        favorites = favorite_storage.get_user_favorites(user_id)
        
        if not favorites:
            await message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        keyboard = []
        for fav in favorites:
            btn_text = (
                f"{fav['origin']} ‚Üí {fav['destination']} "
                f"{fav.get('depart_date', '')} {fav.get('return_date', '')}"
            )
            keyboard.append([InlineKeyboardButton(
                btn_text, 
                callback_data=f"fav_detail_{fav['route_key']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')])
        
        await message.reply_text(
            "üìå –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    @staticmethod
    async def show_favorite_details(update: Update, user_id: int, route_key: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è"""
        message = update.message or update.callback_query.message
        
        favorites = favorite_storage.get_user_favorites(user_id)
        favorite = next((f for f in favorites if f['route_key'] == route_key), None)
        
        if not favorite:
            await message.reply_text("‚ùå –†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return
        
        msg_text = (
            f"üîç –ò–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Å:\n"
            f"üõ´ {favorite['origin']} ‚Üí {favorite['destination']}\n"
            f"üìÖ –í—ã–ª–µ—Ç: {favorite.get('depart_date', '–ª—é–±–∞—è –¥–∞—Ç–∞')}\n"
            f"üìÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {favorite.get('return_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω: {datetime.fromisoformat(favorite['added_at']).strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"fav_remove_{route_key}")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='my_favorites')]
        ]
        
        await message.reply_text(
            msg_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    @staticmethod
    async def remove_favorite(update: Update, user_id: int, route_key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Ä–µ–π—Å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        message = update.message or update.callback_query.message
        
        if favorite_storage.remove_favorite(user_id, route_key):
            await message.reply_text("‚úÖ –†–µ–π—Å —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        else:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç —Ä–µ–π—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    @staticmethod
    async def check_favorites_and_notify(context) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        all_favorites = favorite_storage.get_all_favorites()
        
        for user_id, favorites in all_favorites.items():
            for fav in favorites:
                try:
                    params = {
                        'origin': fav['origin'],
                        'destination': fav['destination'],
                        'token': AVIASALES_API_TOKEN,
                        'currency': 'rub'
                    }
                    
                    if fav.get('depart_date'):
                        params['depart_date'] = fav['depart_date']
                    if fav.get('return_date'):
                        params['return_date'] = fav['return_date']
                    
                    response = requests.get(AVIASALES_CHEAP_URL, params=params, timeout=15)
                    data = response.json()
                    
                    if data.get('success', False) and data.get('data'):
                        tickets = []
                        for dest_data in data['data'].values():
                            if isinstance(dest_data, dict):
                                tickets.extend(dest_data.values())
                        
                        if tickets:
                            valid_tickets = [t for t in tickets if isinstance(t, dict) and 'price' in t]
                            if valid_tickets:
                                cheapest = min(valid_tickets, key=lambda x: float(x['price']))
                                
                                message = (
                                    f"üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–π—Å—É:\n"
                                    f"üõ´ {fav['origin']} ‚Üí {fav['destination']}\n"
                                    f"üìÖ –í—ã–ª–µ—Ç: {fav.get('depart_date', '–ª—é–±–∞—è –¥–∞—Ç–∞')}\n"
                                    f"üìÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {fav.get('return_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                                    f"üé´ –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç —Å–µ–≥–æ–¥–Ω—è:\n"
                                    f"üí∞ –¶–µ–Ω–∞: {cheapest['price']} RUB\n"
                                    f"‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {await get_airline_name(cheapest.get('airline', ''))}\n"
                                    f"üõ´ –í—ã–ª–µ—Ç: {format_date(cheapest.get('departure_at', ''))}\n"
                                    f"_*—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏_"
                                    # f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.aviasales.ru/search/{fav['origin']}{fav['destination']}"
                                )
                                
                                await context.bot.send_message(chat_id=user_id, text=message)
                except Exception as e:
                    logger.error(f"Error checking favorite for user {user_id}: {e}")