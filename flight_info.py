import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import AVIATIONSTACK_API_KEY, AVIATIONSTACK_FLIGHT_URL
from utils import format_date
import json

logger = logging.getLogger(__name__)

async def show_flight_info_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    
    instruction_text = (
        "‚úàÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–∫–æ–¥ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏><–Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "SU1234\n"
        "S7151\n"
        "U6256\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ."
    )
    
    if update.callback_query:
        await message.edit_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await message.reply_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_flight_info_request(update: Update, flight_number: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"""
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        flight_number = flight_number.strip().upper()
        
        if not flight_number:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞")
            return
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ AviationStack
        params = {
            'access_key': AVIATIONSTACK_API_KEY,
            'flight_iata': flight_number,
            'limit': 1
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(AVIATIONSTACK_FLIGHT_URL, params=params, timeout=15)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"AviationStack response status: {response.status_code}")
        
        try:
            data = response.json()
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}, response text: {response.text}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤–∏–∞–¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not data or not isinstance(data, dict):
            logger.error(f"Invalid response format: {data}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤–∏–∞–¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
        if 'error' in data:
            error_info = data.get('error', {})
            error_message = error_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logger.error(f"AviationStack error: {error_message}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ API: {error_message}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö
        flight_data_list = data.get('data', [])
        if not flight_data_list or not isinstance(flight_data_list, list):
            await update.message.reply_text(
                f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return
        
        flight_data = flight_data_list[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–µ
        message = f"‚úàÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number}:\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º
        departure = flight_data.get('departure', {}) or {}
        arrival = flight_data.get('arrival', {}) or {}
        
        message += f"üõ´ –í—ã–ª–µ—Ç: {departure.get('airport', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
        message += f"({departure.get('iata', '?')})\n"
        
        message += f"üõ¨ –ü—Ä–∏–±—ã—Ç–∏–µ: {arrival.get('airport', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
        message += f"({arrival.get('iata', '?')})\n\n"
        
        # –í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–±—ã—Ç–∏—è
        if departure.get('scheduled'):
            message += f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–ª–µ—Ç: {format_date(departure['scheduled'])}\n"
        
        if arrival.get('scheduled'):
            message += f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–±—ã—Ç–∏–µ: {format_date(arrival['scheduled'])}\n\n"
        
        # –°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞
        status = flight_data.get('flight_status', 'unknown')
        status_emoji = {
            'scheduled': 'üìÖ',
            'active': 'üõ´',
            'landed': 'üõ¨',
            'cancelled': '‚ùå',
            'incident': '‚ö†Ô∏è',
            'diverted': 'üîÑ'
        }.get(status, '‚ùì')
        
        message += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status.capitalize()}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        airline = flight_data.get('airline', {}) or {}
        if airline and airline.get('name'):
            message += f"üèõÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline['name']}\n"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ aircraft (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        aircraft = flight_data.get('aircraft')
        if aircraft and isinstance(aircraft, dict) and aircraft.get('iata'):
            message += f"üõ©Ô∏è –¢–∏–ø –í–°: {aircraft['iata']}\n"
        elif aircraft and isinstance(aircraft, dict) and aircraft.get('registration'):
            message += f"üõ©Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {aircraft['registration']}\n"
        
        flight_info = flight_data.get('flight', {}) or {}
        if flight_info and flight_info.get('number'):
            message += f"üî¢ –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞: {flight_info['number']}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–µ—Ä–∂–∫–µ
        if departure.get('delay'):
            message += f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ª–µ—Ç–∞: {departure['delay']} –º–∏–Ω\n"
        
        if arrival.get('delay'):
            message += f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {arrival['delay']} –º–∏–Ω\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–µ–π—Å–∞
        if flight_data.get('flight_date'):
            message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–π—Å–∞: {flight_data['flight_date']}\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–π—Å", callback_data='flight_info')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except requests.exceptions.Timeout:
        await update.message.reply_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    except IndexError:
        await update.message.reply_text(
            f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {flight_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='flight_info')],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )