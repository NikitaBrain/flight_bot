import logging
from datetime import datetime
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from config import AVIASALES_STATS_URL, AVIASALES_API_TOKEN
from utils import get_city_code

logger = logging.getLogger(__name__)

async def handle_price_stats(update: Update, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π"""
    try:
        parts = text.split()
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –°–æ—á–∏)")
            return

        origin = await get_city_code(parts[0])
        destination = await get_city_code(parts[1])
        
        if not origin or not destination:
            await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return

        params = {
            'origin': origin,
            'destination': destination,
            'token': AVIASALES_API_TOKEN,
            'currency': 'rub'
        }

        response = requests.get(AVIASALES_STATS_URL, params=params, timeout=15)
        data = response.json()
        
        if not data.get('success', False):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API.")
            return
            
        stats = data.get('data', {})
        
        if not stats:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        monthly_data = []
        valid_months = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω {origin} ‚Üí {destination}:\n\n"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        for month_str, month_data in sorted(stats.items()):
            if not isinstance(month_data, dict):
                continue
                
            price = month_data.get('price')
            if not price:
                continue
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            try:
                month_name = datetime.strptime(month_str, "%Y-%m").strftime("%B %Y")
            except ValueError:
                month_name = month_str
                
            monthly_data.append({
                'month': month_str,
                'month_name': month_name,
                'price': price
            })
            valid_months += 1
            
            message += (
                f"‚Ä¢ {month_name}:\n"
                f"  üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} RUB\n\n"
            )

        if valid_months == 0:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        min_price = min(item['price'] for item in monthly_data)
        max_price = max(item['price'] for item in monthly_data)
        avg_price = sum(item['price'] for item in monthly_data) / valid_months
        
        # –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Ä–æ–≥–æ–π –º–µ—Å—è—Ü
        cheapest_month = min(monthly_data, key=lambda x: x['price'])
        expensive_month = max(monthly_data, key=lambda x: x['price'])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message += (
            "\nüîç –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –º–µ—Å—è—Ü: {cheapest_month['month_name']} - {cheapest_month['price']} RUB\n"
            f"‚Ä¢ –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –º–µ—Å—è—Ü: {expensive_month['month_name']} - {expensive_month['price']} RUB\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {int(avg_price)} RUB\n"
            f"‚Ä¢ –†–∞–∑–±—Ä–æ—Å —Ü–µ–Ω: {max_price - min_price} RUB\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Å—è—Ü–µ–≤: {valid_months}\n\n"
            # f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.aviasales.ru/stats/{origin}{destination}"
        )

        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]]
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ü–µ–Ω: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")