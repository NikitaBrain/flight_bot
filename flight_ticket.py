import requests
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)
import logging
from datetime import datetime, timedelta
import pytz
from config import (
    TELEGRAM_BOT_TOKEN,
    AVIASALES_API_TOKEN,
    AVIASALES_CHEAP_URL,
    AVIASALES_CALENDAR_URL,
    CITY_SEARCH_URL,
    AIRLINES_URL,
    AIRCRAFT_URL
)
from favorites import FavoritesManager
from storage import favorite_storage
from price_calendar import handle_price_calendar
from stats import handle_price_stats
from airline_routes import show_airline_selection, show_airline_routes
from flight_info import show_flight_info_menu, handle_flight_info_request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
city_cache = {}
airline_cache = {}
aircraft_cache = {}
user_states = {}
user_search_params = {}

async def load_city_codes():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –≥–æ—Ä–æ–¥–æ–≤ –∏ –∏—Ö IATA-–∫–æ–¥–æ–≤"""
    global city_cache
    try:
        response = requests.get(CITY_SEARCH_URL, timeout=10)
        cities = response.json()
        city_cache = {city['name'].lower(): city['code'] for city in cities if 'code' in city and 'name' in city}
        logger.info(f"Loaded {len(city_cache)} city codes")
    except Exception as e:
        logger.error(f"Failed to load city codes: {e}")

async def load_airline_codes():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π"""
    global airline_cache
    try:
        response = requests.get(AIRLINES_URL, timeout=10)
        airlines = response.json()
        airline_cache = {airline['code']: airline['name'] for airline in airlines if 'code' in airline and 'name' in airline}
        logger.info(f"Loaded {len(airline_cache)} airline codes")
    except Exception as e:
        logger.error(f"Failed to load airline codes: {e}")

async def load_aircraft_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–º–æ–ª–µ—Ç–∞—Ö"""
    global aircraft_cache
    try:
        response = requests.get(AIRCRAFT_URL, timeout=10)
        aircrafts = response.json()
        aircraft_cache = {aircraft['code']: aircraft['name'] for aircraft in aircrafts if 'code' in aircraft and 'name' in aircraft}
        logger.info(f"Loaded {len(aircraft_cache)} aircraft codes")
    except Exception as e:
        logger.error(f"Failed to load aircraft data: {e}")

async def get_city_code(city_name: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º IATA-–∫–æ–¥ –≥–æ—Ä–æ–¥–∞"""
    city_name = city_name.lower().strip()
    if city_name in city_cache:
        return city_cache[city_name]
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for name, code in city_cache.items():
        if city_name in name:
            return code
    return None

async def get_airline_name(airline_code: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∫–æ–¥—É"""
    if not airline_cache:
        await load_airline_codes()
    return airline_cache.get(airline_code, airline_code)

async def get_aircraft_name(aircraft_code: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞ –ø–æ –∫–æ–¥—É"""
    if not aircraft_cache:
        await load_aircraft_data()
    return aircraft_cache.get(aircraft_code, aircraft_code)

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"""
    try:
        dt = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S%z")
        local_tz = pytz.timezone('Europe/Moscow')
        local_dt = dt.astimezone(local_tz)
        return local_dt.strftime("%d.%m.%Y %H:%M")
    except:
        return date_str

async def show_main_menu(update: Update, text: str = None, is_start: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞"""
    keyboard = [
        ["üîç –î–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã", "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ü–µ–Ω"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
        ["‚úàÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–π—Å—ã", "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Ä–µ–π—Å–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    if hasattr(update, 'message'):
        if is_start:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!\n\n"
                "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:\n"
                "‚ú® –ù–∞–π—Ç–∏ —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã\n"
                "‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n"
                "üìÜ –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–ª–µ—Ç–∞\n"
                "üìà –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ü–µ–Ω\n"
                "‚úàÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π\n"
                "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–π—Å–µ\n",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    else:
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        await update.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        await update.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        await update.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await load_city_codes()
    await load_airline_codes()
    await load_aircraft_data()
    await show_main_menu(update, is_start=True)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    logger.info(f"Received callback data: {query.data} (User: {query.from_user.id})")
    
    user_id = query.from_user.id
    choice = query.data
    
    current_state = user_states.get(user_id, 'no state')
    logger.info(f"User state before handling: {current_state}")
    
    if choice == 'back':
        await show_main_menu(query)
        return
    
    if choice == 'add_favorite':
        if user_id in user_search_params:
            await FavoritesManager.add_to_favorites(query, user_id, user_search_params[user_id])
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    
    if choice.startswith('fav_detail_'):
        route_key = choice.split('_', 2)[2]
        await FavoritesManager.show_favorite_details(query, user_id, route_key)
        return
    
    if choice.startswith('fav_remove_'):
        route_key = choice.split('_', 2)[2]
        await FavoritesManager.remove_favorite(query, user_id, route_key)
        return
    
    if choice.startswith('period_'):
        period = choice.split('_')[1]
        await handle_period_selection(query, user_id, period)
        return
    
    if choice.startswith('airline_'):
        airline_code = choice.split('_')[1]
        await show_airline_routes(update, context, airline_code)
        return
    
    if choice == 'airline_routes':
        await show_airline_selection(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
    if choice == 'flight_info':
        user_states[user_id] = 'flight_info'
        from flight_info import show_flight_info_menu
        await show_flight_info_menu(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback –¥–∞–Ω–Ω—ã—Ö
    user_states[user_id] = choice
    
    instructions = {
        'cheap': (
            "üîç –ü–æ–∏—Å–∫ –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è> [–¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì] [–¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "–ú–æ—Å–∫–≤–∞ –°–æ—á–∏\n"
            "–ú–æ—Å–∫–≤–∞ –°–æ—á–∏ 01.08.2025\n"
            "–ú–æ—Å–∫–≤–∞ –°–æ—á–∏ 01.08.2025 10.08.2025"
        ),
        'calendar': "üìÖ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è>",
        'stats': "üìä –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è>",
        'flight_info': "‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∫–æ–¥ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏><–Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: SU1234)"
    }
    
    instruction_text = instructions.get(choice, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞")
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=instruction_text,
        reply_markup=reply_markup
    )

async def handle_cheap_tickets(update: Update, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤"""
    try:
        parts = text.split()
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return

        origin = await get_city_code(parts[0])
        destination = await get_city_code(parts[1])
        
        if not origin or not destination:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return

        depart_date = None
        return_date = None
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if len(parts) >= 3:
            try:
                depart_date = datetime.strptime(parts[2], "%d.%m.%Y")
                if depart_date.date() < datetime.now().date():
                    await update.message.reply_text("‚ùå –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return
        
        if len(parts) >= 4:
            try:
                return_date = datetime.strptime(parts[3], "%d.%m.%Y")
                if depart_date and return_date.date() < depart_date.date():
                    await update.message.reply_text("‚ùå –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id
        user_search_params[user_id] = {
            'origin': origin,
            'destination': destination,
            'depart_date': depart_date.strftime("%Y-%m-%d") if depart_date else None,
            'return_date': return_date.strftime("%Y-%m-%d") if return_date else None
        }

        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
        if not depart_date and not return_date:
            keyboard = [
                [
                    InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='period_7'),
                    InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data='period_14')
                ],
                [
                    InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='period_30'),
                    InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data='period_90')
                ],
                [
                    InlineKeyboardButton("–ë–µ–∑ –ø–µ—Ä–∏–æ–¥–∞", callback_data='period_none'),
                    InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤:",
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã, —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            await search_exact_dates(
                update,
                origin=origin,
                destination=destination,
                depart_date=depart_date,
                return_date=return_date
            )
            
    except Exception as e:
        logger.error(f"Error in cheap tickets handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def search_exact_dates(update: Update, origin: str, destination: str, 
                           depart_date: datetime, return_date: datetime = None):
    """–ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω—ã–º –¥–∞—Ç–∞–º"""
    params = {
        'origin': origin,
        'destination': destination,
        'depart_date': depart_date.strftime("%Y-%m-%d"),
        'token': AVIASALES_API_TOKEN,
        'currency': 'rub'
    }
    
    if return_date:
        params['return_date'] = return_date.strftime("%Y-%m-%d")
    
    await perform_search(update, params, is_period=False)

async def perform_search(update, params, is_period=False):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤"""
    try:
        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {k: v for k, v in params.items() if v is not None}
        
        response = requests.get(AVIASALES_CHEAP_URL, params=params, timeout=15)
        data = response.json()
        
        if not data.get('success', False) or not data.get('data'):
            error_msg = "‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            if hasattr(update, 'message'):
                await update.message.reply_text(error_msg)
            else:
                await update.edit_message_text(error_msg)
            return
        
        tickets = []
        for dest_data in data['data'].values():
            if isinstance(dest_data, dict):
                tickets.extend(dest_data.values())
        
        if not tickets:
            error_msg = "‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            if hasattr(update, 'message'):
                await update.message.reply_text(error_msg)
            else:
                await update.edit_message_text(error_msg)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id if hasattr(update, 'message') else update.callback_query.from_user.id
        user_search_params[user_id] = params
        
        message = f"üé´ –ë–∏–ª–µ—Ç—ã {params['origin']} ‚Üí {params['destination']}:\n"
        
        if is_period:
            if 'depart_date' in params and 'return_date' in params:
                start_date = datetime.strptime(params['depart_date'], "%Y-%m-%d")
                end_date = datetime.strptime(params['return_date'], "%Y-%m-%d")
                message += f"üìÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: {start_date.strftime('%d.%m.%Y')}-{end_date.strftime('%d.%m.%Y')}\n"
        else:
            if 'depart_date' in params:
                depart_date = datetime.strptime(params['depart_date'], "%Y-%m-%d")
                message += f"üõ´ –í—ã–ª–µ—Ç: {depart_date.strftime('%d.%m.%Y')}\n"
            if 'return_date' in params:
                return_date = datetime.strptime(params['return_date'], "%Y-%m-%d")
                message += f"üõ¨ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {return_date.strftime('%d.%m.%Y')}\n"
        
        message += "\n"
        
        for ticket in tickets[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –±–∏–ª–µ—Ç–∞–º–∏
            if not isinstance(ticket, dict):
                continue
                
            airline_code = ticket.get('airline', '')
            airline_name = await get_airline_name(airline_code)
            
            flight_number = str(ticket.get('flight_number', ''))
            departure_at = format_date(ticket.get('departure_at', ''))
            return_at = format_date(ticket.get('return_at', '')) if ticket.get('return_at') else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            price = ticket.get('price', '?')
            # flight_link = f"https://www.aviasales.ru/search/{params['origin']}{params['destination']}"
            
            aircraft_code = ticket.get('plane', '')
            aircraft_name = await get_aircraft_name(aircraft_code) if aircraft_code else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            
            message += (
                f"‚úàÔ∏è –†–µ–π—Å: {airline_code}{flight_number}\n"
                f"üèõÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline_name}\n"
                f"üõ©Ô∏è –¢–∏–ø –í–°: {aircraft_name}\n"
                f"üõ´ –í—ã–ª–µ—Ç: {departure_at}\n"
                f"üõ¨ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {return_at}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} RUB\n"
                f"__—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏__"
                # f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {flight_link}\n\n"
            )
        
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id if hasattr(update, 'message') else update.callback_query.from_user.id
        user_search_params[user_id] = params
        
        keyboard = [
            [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_favorite')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        parse_mode='MarkdownV2'
        
        if hasattr(update, 'message'):
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.edit_message_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in ticket search: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if hasattr(update, 'message'):
            await update.message.reply_text(error_msg)
        else:
            await update.edit_message_text(error_msg)

async def handle_period_selection(query, user_id, period):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        params = user_search_params.get(user_id, {})
        if not params:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if period == 'none':
            # –ü–æ–∏—Å–∫ –±–µ–∑ –ø–µ—Ä–∏–æ–¥–∞
            params.update({
                'token': AVIASALES_API_TOKEN,
                'currency': 'rub'
            })
            # –£–¥–∞–ª—è–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            params.pop('depart_date', None)
            params.pop('return_date', None)
            await perform_search(query, params, is_period=False)
            return
        
        days = int(period)
        today = datetime.now()
        end_date = today + timedelta(days=days)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ü–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤ –ø–µ—Ä–∏–æ–¥–µ
        calendar_params = {
            'origin': params['origin'],
            'destination': params['destination'],
            'depart_date': today.strftime("%Y-%m"),
            'return_date': end_date.strftime("%Y-%m"),
            'calendar_type': 'departure_date',
            'token': AVIASALES_API_TOKEN,
            'currency': 'rub'
        }
        
        response = requests.get(AVIASALES_CALENDAR_URL, params=calendar_params, timeout=15)
        data = response.json()
        
        if not data.get('success', False) or not data.get('data'):
            await query.edit_message_text(
                "‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]])
            )
            return
        
        cheapest_ticket = None
        min_price = float('inf')
        
        for date_str, ticket_data in data['data'].items():
            if 'departure_at' in ticket_data and 'return_at' in ticket_data:
                try:
                    depart_date = datetime.strptime(ticket_data['departure_at'], "%Y-%m-%dT%H:%M:%S%z").date()
                    return_date = datetime.strptime(ticket_data['return_at'], "%Y-%m-%dT%H:%M:%S%z").date()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–µ –¥–∞—Ç—ã –≤—Ö–æ–¥—è—Ç –≤ –ø–µ—Ä–∏–æ–¥
                    if (today.date() <= depart_date <= end_date.date() and 
                        today.date() <= return_date <= end_date.date()):
                        
                        if ticket_data['price'] < min_price:
                            min_price = ticket_data['price']
                            cheapest_ticket = ticket_data
                except:
                    continue
        
        if not cheapest_ticket:
            await query.edit_message_text(
                "‚ùå –ë–∏–ª–µ—Ç—ã —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º user_search_params —Å –¥–∞—Ç–∞–º–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
        user_search_params[user_id] = {
            'origin': params['origin'],
            'destination': params['destination'],
            'depart_date': cheapest_ticket['departure_at'][:10],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É YYYY-MM-DD
            'return_date': cheapest_ticket['return_at'][:10],     # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É YYYY-MM-DD
            'token': AVIASALES_API_TOKEN,
            'currency': 'rub'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        airline_name = await get_airline_name(cheapest_ticket['airline'])
        departure_at = format_date(cheapest_ticket['departure_at'])
        return_at = format_date(cheapest_ticket['return_at'])
        
        message = (
            f"üé´ –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç {params['origin']} ‚Üí {params['destination']}:\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: {today.strftime('%d.%m.%Y')}-{end_date.strftime('%d.%m.%Y')} ({days} –¥–Ω–µ–π)\n\n"
            f"‚úàÔ∏è –†–µ–π—Å: {cheapest_ticket['airline']}{cheapest_ticket['flight_number']}\n"
            f"üèõÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline_name}\n"
            f"üõ´ –í—ã–ª–µ—Ç: {departure_at}\n"
            f"üõ¨ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {return_at}\n"
            f"üí∞ –¶–µ–Ω–∞: {cheapest_ticket['price']} RUB\n\n"
            f" *—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_favorite')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error in period selection: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]])
        )

async def handle_calendar(update: Update, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ü–µ–Ω"""
    try:
        parts = text.split()
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return

        origin = await get_city_code(parts[0])
        destination = await get_city_code(parts[1])
        
        if not origin or not destination:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return

        params = {
            'origin': origin,
            'destination': destination,
            'depart_date': datetime.now().strftime("%Y-%m"),
            'calendar_type': 'departure_date',
            'token': AVIASALES_API_TOKEN,
            'currency': 'rub'
        }
        
        response = requests.get(AVIASALES_CALENDAR_URL, params=params, timeout=15)
        data = response.json()
        
        if not data.get('success', False) or not data.get('data'):
            await update.message.reply_text("‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –ø–æ –¥–Ω—è–º
        message = f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ü–µ–Ω {origin} ‚Üí {destination}:\n\n"
        prices = []
        
        for date_str, ticket_data in data['data'].items():
            if 'price' in ticket_data:
                date = datetime.strptime(date_str, "%Y-%m-%d")
                prices.append((date.strftime("%d.%m.%Y"), ticket_data['price']))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        prices.sort(key=lambda x: datetime.strptime(x[0], "%d.%m.%Y"))
        
        for date, price in prices[:30]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 30 –∑–∞–ø–∏—Å—è–º–∏
            message += f"{date}: {price} RUB\n"
        
        message += f"\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.aviasales.ru/search/{origin}{destination}"
        
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in calendar handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_price_stats(update: Update, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω"""
    try:
        parts = text.split()
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return

        origin = await get_city_code(parts[0])
        destination = await get_city_code(parts[1])
        
        if not origin or not destination:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        params = {
            'origin': origin,
            'destination': destination,
            'depart_date': datetime.now().strftime("%Y-%m"),
            'calendar_type': 'departure_date',
            'token': AVIASALES_API_TOKEN,
            'currency': 'rub'
        }
        
        response = requests.get(AVIASALES_CALENDAR_URL, params=params, timeout=15)
        data = response.json()
        
        if not data.get('success', False) or not data.get('data'):
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã
        prices = [ticket['price'] for ticket in data['data'].values() if 'price' in ticket]
        
        if not prices:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        min_price = min(prices)
        max_price = max(prices)
        avg_price = sum(prices) / len(prices)
        
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω {origin} ‚Üí {destination}:\n\n"
            f"üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price} RUB\n"
            f"üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price} RUB\n"
            f"üîπ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {int(avg_price)} RUB\n"
            f"üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(prices)}\n\n"
            # f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.aviasales.ru/search/{origin}{destination}"
        )
        
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in price stats handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Reply-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üîç –î–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã":
        user_states[user_id] = 'cheap'
        await update.message.reply_text(
            "üîç –ü–æ–∏—Å–∫ –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è> [–¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì] [–¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "–ú–æ—Å–∫–≤–∞ –°–æ—á–∏\n"
            "–ú–æ—Å–∫–≤–∞ –°–æ—á–∏ 01.08.2025\n"
            "–ú–æ—Å–∫–≤–∞ –°–æ—á–∏ 01.08.2025 10.08.2025",
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ü–µ–Ω":
        user_states[user_id] = 'calendar'
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è>",
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω":
        user_states[user_id] = 'stats'
        await update.message.reply_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è>",
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await FavoritesManager.show_favorites_menu(update, user_id)
    elif text == "‚úàÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–π—Å—ã":
        await show_airline_selection(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Ä–µ–π—Å–µ":
        user_states[user_id] = 'flight_info'
        from flight_info import show_flight_info_menu
        await show_flight_info_menu(update, context)
    elif user_id in user_states:
        search_type = user_states[user_id]
        
        if search_type == 'cheap':
            await handle_cheap_tickets(update, text)
        elif search_type == 'calendar':
            await handle_price_calendar(update, text)
        elif search_type == 'stats':
            await handle_price_stats(update, text)
        elif search_type == 'flight_info':
            from flight_info import handle_flight_info_request
            await handle_flight_info_request(update, text)
    else:
        await show_main_menu(update)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("Bot is starting...")
    app.run_polling()

if __name__ == '__main__':
    main()