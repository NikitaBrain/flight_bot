import logging
from datetime import datetime
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from config import AVIASALES_CALENDAR_URL, AVIASALES_API_TOKEN
from utils import get_city_code, format_date

logger = logging.getLogger(__name__)

async def handle_price_calendar(update: Update, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ü–µ–Ω"""
    try:
        parts = text.split()
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –°–æ—á–∏)")
            return

        origin = await get_city_code(parts[0])
        destination = await get_city_code(parts[1])
        
        if not origin or not destination:
            await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return

        params = {
            'origin': origin,
            'destination': destination,
            'depart_date': datetime.now().strftime("%Y-%m"),
            'calendar_type': 'departure_date',
            'token': AVIASALES_API_TOKEN,
            'currency': 'rub'
        }

        response = requests.get(AVIASALES_CALENDAR_URL, params=params, timeout=15)
        data = response.json()
        
        if not data.get('data'):
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return

        message = f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ü–µ–Ω {origin} ‚Üí {destination}:\n\n"
        prices = []
        
        for date_str, ticket_data in data['data'].items():
            if 'price' in ticket_data:
                date = datetime.strptime(date_str, "%Y-%m-%d")
                prices.append((date.strftime("%d.%m.%Y"), ticket_data['price']))
        
        prices.sort(key=lambda x: datetime.strptime(x[0], "%d.%m.%Y"))
        
        for date, price in prices[:30]:
            message += f"üìÖ {date}: {price} RUB\n"
        
        # message += f"\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.aviasales.ru/search/{origin}{destination}"

        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]]
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ü–µ–Ω: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")